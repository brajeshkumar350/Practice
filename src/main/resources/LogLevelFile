ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF.

We will go over them in reverse order with more detail below:

OFF
This log level does not log anything. This OFF level is used to turn off logging and is the greatest possible rank. With this log level, nothing gets logged at all.

FATAL
FATAL means that the application is about to stop a serious problem or corruption from happening.

ERROR
Unlike the FATAL logging level, error does not mean your application is aborting.
Instead, there is just an inability to access a service or a file.

WARN
The WARN log level is used when you have detected an unexpected application problem. This means you are not quite sure whether the problem will recur or remain. You may not notice any harm to your application at this point. This issue is usually a situation that stops specific processes from running. Yet it does not mean that the application has been harmed. In fact, the code should continue to work as usual. You should eventually check these warnings just in case the problem reoccurs.

INFO
INFO messages are like the normal behavior of applications. They state what happened. For example, if a particular service stopped or started or you added something to the database. These entries are nothing to worry about during usual operations. The information logged using the INFO log is usually informative, and it does not necessarily require you to follow up on it.

DEBUG
With DEBUG, you are giving diagnostic information in a detailed manner. It is verbose and has more information than you would need when using the application. DEBUG logging level is used to fetch information needed to diagnose, troubleshoot, or test an application. This ensures a smooth running application.

TRACE
The TRACE log level captures all the details about the behavior of the application. It is mostly diagnostic and is more granular and finer than DEBUG log level. This log level is used in situations where you need to see what happened in your application or what happened in the third-party libraries used. You can use the TRACE log level to query parameters in the code or interpret the algorithmâ€™s steps


ALL
This log level logs any logging levels that are defined. It logs everything and includes custom logging levels as well. It is the combination of all other logging levels.


******how to change log level at run time********
 LoggerContext loggerContext = (LoggerContext)LoggerFactory.getILoggerFactory();
 String currentLogLevel = loggerContext.getLogger(packageName).getEffectiveLevel();
 switch (changeToLogLevel) {
  case "trace":
	loggerContext.getLogger(packageName).setLevel(Level.TRACE);
	break;
	}


*************************